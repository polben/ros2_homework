wsl --list --online, list available distros

start linux: type and open ubuntu

open VS code: code .


Git config:

git config --global user.name "yourusername"
git config --global user.email "your@email"

ssh-keygen -t rsa -b 4096 -C "polgarbence0710@gmail.com"


Locale config

locale
sudo apt update && sudo apt install locales
sudo locale-gen en_US en_US.UTF-8
sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
export LANG=en_US.UTF-8
locale


SOftware properties and universe repo
sudo apt install software-properties-common
sudo add-apt-repository universe


update

sudo apt update
sudo apt upgrade


ros:

sudo apt update && sudo apt install curl -y
export ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}')
curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.$(. /etc/os-release && echo $VERSION_CODENAME)_all.deb" # If using Ubuntu derivates use $UBUNTU_CODENAME
sudo dpkg -i /tmp/ros2-apt-source.deb


had some problems with newest noble ubuntu, but v22.04 worked

sourcing:
source /opt/ros/humble/setup.bash

add to bashrc


Turtlesim:

sudo apt update
sudo apt install ros-humble-turtlesim

ros2 pkg list
ros2 pkg executables

execs. from turtlesim: ros2 pkg executables turtlesim
located at?:

cd /opt/ros/humble/

code . opens the current directory in vscode, ctrl+p "turtlesim"


ros2 run -h


ros2 run turtlesim turtlesim_node
ros2 run turtlesim 

Nodes

ros2 node -h
ros2 node list - list running nodes

ros2 node info /turtlesim - display node info

Topics:

connects 2 nodes together: publicsher, subscriber
	sends data trough a topic to a subscriber

ros2 topic list (-t : type of topic)


rqt_graph - show node graphs

ros2 topic echo /topic_name
ros2 topic info /name
ros2 interface show geometry_msgs/msg/Twist

send data to a topic: ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, ...}}
	send continously:
same command: ros2 topic pub --rate 1 /turtle/... - pusblish at 1 hertz

ros2 topic echo /turtle1/pose
	prints the post of the turtle 
	RQT graph gets a new sub aswell

topics: stream of data is always read and written

services: no concept of continously publishing, in this case its more like message based

Service relationship:

ros2 service list (-t) - list available service

ros2 service type <name>
ros2 service type /clear for example
ros2 service find <servicetype>
		  std_srvs/srv/Empty
ros2 interface show <service type> - query interfaces


call a service:

ros2 service call /clear std_srvs/srv/Empty
	this clears the drawings

ros2 service call /spawn turtlesim/srv/Spawn

ros2 serive call /spawn turtlesim/srv/Spawn "{x: 2, y:2...theta: 0.2, name: ''}"
	spawns another turtle

Parameters:
	input data into a node (input a parameter)

ros2 param list

ros2 param get <node_name> <parameter_name>

ros2 param set nodename parameter value

dump parameters:
	ros2 param dump nodename
	ros2 param dump node > turtlesim.yml

ros2 param load nodename turtlesim.yml
	load settings into a node

load a param on startup
	ros2 run package executable --ros-args --params-file turtlesim.yml


Ros Actions:
	same server client model, but has a goal, feedback, result setup

	in turtlesim, press roation then cancel: a warning pops up: goal cancelled
		also inputting commands repeatedly results in this warning, aborting the previous goal

ros2 node info nodename
	has some actions

ros2 action list
ros2 action list -t
ros2 action info actionname

ros2 interface show actionname

ros2 interface show turtlesim/action/RotateAbsolute

send an action goal

ros2 action send_goal actionname actiontype goal (goal: "{theta: 1.12}")


Ros workspace:

	a folder that contains my code, my packages, a source foldere

ie. ros2_ws
	source and install files

ros2_ws
	build
	install
	log
	plotjuggler_layout
	src
		gazeboo_tutorial
		install
			...
		log
			...
		nav2_bringup
		urdf_tutorial_r2d2
		whelled_robot
		...

create the workspace folder, create the src folder
	after this, rest is generated by colcon
	its a command line tool to build packages
		and builds executables from source files

packages are inside the src
	gazeboo is a package

foldersa inside a pacakage:
	config
	include
	launch
	...
	src
		... sourcecode
	CMakeList.txt - helps build process
	package.xml - also supports build process


sudo apt install python3-colcon-common-extensions
mkdir -p ~/ros2_ws/src
cd ~/ros2_ws

add some source
git clone https://github.com/ros/ros_tutorials.git -b humble


colcon tab completion:
	echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashsrc

build with colcon from ~/ros2_ws
	symlink builds symbolic links from sourcrefiles, instead of copying
	colcon build --symlink-install


next step is to soruce the folder, source overlay from ~/ros_ws
	source install/local_setup.bash
makes it possible to run some packages that are just built


modify turtlesim by code ., then rewirte the window title, then build
	build: symlink build, source, run node


Creating a package:
create a workspace
cd to ~/ros2_ws_2/src
ros2 pkg create --build-type ament_cmake --node-name my_node my_package


build a package:
cd into the workspace!

~/ros2_ws_w

colcon build --packages-select my_package

source it

source install/local_setup.bash

ros2 run my_package my_node


C++ publisher, subsciber node setup:

install cmake extention in VScode

create workspace, cd into src

ros2 pkg create --build-type ament_cmake cpp_pubsub


create source files, then append the cmake file

## ADDED -------
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)

# for publisher
add_executable(talker src/publisher.cpp)
ament_target_dependencies(talker rclcpp std_msgs)

# for subsciber
add_executable(listener src/subsciber.cpp)
ament_target_dependencies(listener rclcpp std_msgs)
install(TARGETS
	talker # for publisher
	listener # for sub
	DESTINATION lib/${PROJECT_NAME})
## END ADDED -------

append the package.xml

<!-- ADDED -->
	<depend>rclcpp</depend>
	<depend>std_msgs</depend>
<!-- END ADDED -->

under:
	<buildtool_depend>ament_cmake</buildtool_depend>

before dep check:
sudo rosdep init
rosdep update

check for missing dependencies from the worksapce root
	rosdep install -i --from-path src --rosdistro humble -y

build:

colcon build --packages-select cpp_pubsub
source install/setup.bash

ros2 run cpp_pubsub talker



HOMEWORK BUILD AND RUN:

colcon build --packages-select cpp_divide (once)
source install/setup.bash (all terminals)

run:
	ros2 run cpp_divide numbers
	ros2 run cpp_divide divide
	ros2 run cpp_divide output


test denominator:

	ros2 topic pub --once /input_numbers tutorial_interfaces/msg/Num "{num1: 10.0, num2: 0.0, result: 0.0, error: false, error_message:""}"	

ros2 repo token:

	github_pat_---